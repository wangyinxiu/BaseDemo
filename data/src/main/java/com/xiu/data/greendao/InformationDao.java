package com.xiu.data.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xiu.data.bean.response.Information;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INFORMATION".
*/
public class InformationDao extends AbstractDao<Information, Long> {

    public static final String TABLENAME = "INFORMATION";

    /**
     * Properties of entity Information.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property PostTitle = new Property(3, String.class, "postTitle", false, "POST_TITLE");
        public final static Property PostType = new Property(4, String.class, "postType", false, "POST_TYPE");
        public final static Property PostStatus = new Property(5, int.class, "postStatus", false, "POST_STATUS");
        public final static Property PostWord = new Property(6, String.class, "postWord", false, "POST_WORD");
        public final static Property PostImg = new Property(7, String.class, "postImg", false, "POST_IMG");
        public final static Property HomeImg = new Property(8, String.class, "homeImg", false, "HOME_IMG");
        public final static Property IsTop = new Property(9, int.class, "isTop", false, "IS_TOP");
        public final static Property ViewNum = new Property(10, int.class, "viewNum", false, "VIEW_NUM");
        public final static Property CommentNum = new Property(11, int.class, "commentNum", false, "COMMENT_NUM");
        public final static Property FavorNum = new Property(12, int.class, "favorNum", false, "FAVOR_NUM");
        public final static Property DisplayType = new Property(13, int.class, "displayType", false, "DISPLAY_TYPE");
        public final static Property PageSize = new Property(14, int.class, "pageSize", false, "PAGE_SIZE");
        public final static Property PageNo = new Property(15, int.class, "pageNo", false, "PAGE_NO");
    }


    public InformationDao(DaoConfig config) {
        super(config);
    }
    
    public InformationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INFORMATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"ID\" TEXT," + // 1: id
                "\"USER_ID\" TEXT," + // 2: userId
                "\"POST_TITLE\" TEXT," + // 3: postTitle
                "\"POST_TYPE\" TEXT," + // 4: postType
                "\"POST_STATUS\" INTEGER NOT NULL ," + // 5: postStatus
                "\"POST_WORD\" TEXT," + // 6: postWord
                "\"POST_IMG\" TEXT," + // 7: postImg
                "\"HOME_IMG\" TEXT," + // 8: homeImg
                "\"IS_TOP\" INTEGER NOT NULL ," + // 9: isTop
                "\"VIEW_NUM\" INTEGER NOT NULL ," + // 10: viewNum
                "\"COMMENT_NUM\" INTEGER NOT NULL ," + // 11: commentNum
                "\"FAVOR_NUM\" INTEGER NOT NULL ," + // 12: favorNum
                "\"DISPLAY_TYPE\" INTEGER NOT NULL ," + // 13: displayType
                "\"PAGE_SIZE\" INTEGER NOT NULL ," + // 14: pageSize
                "\"PAGE_NO\" INTEGER NOT NULL );"); // 15: pageNo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INFORMATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Information entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String postTitle = entity.getPostTitle();
        if (postTitle != null) {
            stmt.bindString(4, postTitle);
        }
 
        String postType = entity.getPostType();
        if (postType != null) {
            stmt.bindString(5, postType);
        }
        stmt.bindLong(6, entity.getPostStatus());
 
        String postWord = entity.getPostWord();
        if (postWord != null) {
            stmt.bindString(7, postWord);
        }
 
        String postImg = entity.getPostImg();
        if (postImg != null) {
            stmt.bindString(8, postImg);
        }
 
        String homeImg = entity.getHomeImg();
        if (homeImg != null) {
            stmt.bindString(9, homeImg);
        }
        stmt.bindLong(10, entity.getIsTop());
        stmt.bindLong(11, entity.getViewNum());
        stmt.bindLong(12, entity.getCommentNum());
        stmt.bindLong(13, entity.getFavorNum());
        stmt.bindLong(14, entity.getDisplayType());
        stmt.bindLong(15, entity.getPageSize());
        stmt.bindLong(16, entity.getPageNo());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Information entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String postTitle = entity.getPostTitle();
        if (postTitle != null) {
            stmt.bindString(4, postTitle);
        }
 
        String postType = entity.getPostType();
        if (postType != null) {
            stmt.bindString(5, postType);
        }
        stmt.bindLong(6, entity.getPostStatus());
 
        String postWord = entity.getPostWord();
        if (postWord != null) {
            stmt.bindString(7, postWord);
        }
 
        String postImg = entity.getPostImg();
        if (postImg != null) {
            stmt.bindString(8, postImg);
        }
 
        String homeImg = entity.getHomeImg();
        if (homeImg != null) {
            stmt.bindString(9, homeImg);
        }
        stmt.bindLong(10, entity.getIsTop());
        stmt.bindLong(11, entity.getViewNum());
        stmt.bindLong(12, entity.getCommentNum());
        stmt.bindLong(13, entity.getFavorNum());
        stmt.bindLong(14, entity.getDisplayType());
        stmt.bindLong(15, entity.getPageSize());
        stmt.bindLong(16, entity.getPageNo());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Information readEntity(Cursor cursor, int offset) {
        Information entity = new Information( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // postTitle
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // postType
            cursor.getInt(offset + 5), // postStatus
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // postWord
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // postImg
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // homeImg
            cursor.getInt(offset + 9), // isTop
            cursor.getInt(offset + 10), // viewNum
            cursor.getInt(offset + 11), // commentNum
            cursor.getInt(offset + 12), // favorNum
            cursor.getInt(offset + 13), // displayType
            cursor.getInt(offset + 14), // pageSize
            cursor.getInt(offset + 15) // pageNo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Information entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPostTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPostType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPostStatus(cursor.getInt(offset + 5));
        entity.setPostWord(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPostImg(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHomeImg(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsTop(cursor.getInt(offset + 9));
        entity.setViewNum(cursor.getInt(offset + 10));
        entity.setCommentNum(cursor.getInt(offset + 11));
        entity.setFavorNum(cursor.getInt(offset + 12));
        entity.setDisplayType(cursor.getInt(offset + 13));
        entity.setPageSize(cursor.getInt(offset + 14));
        entity.setPageNo(cursor.getInt(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Information entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Information entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Information entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
